assembly apollo
This code is from the original Apollo Guidance Computer (AGC) source code, available on ibiblio.org as well as on an (easier to browse) GitHub repo.

I was already aware that the AGC source code was available online, but someone reminded me of it recently, and my post was mostly a “ha ha, look at this code comment” post.

However, then I became curious about what FLAGORGY actually does, which led me down the rabbit hole of reading a lot of online documentation and some 1960’s manuals (specially this one). The result, in the end, was actually a bit anti-climactic: contrary to what I had hoped, FLAGORGY does not trigger a jingoistic ejection of tiny American flags on the surface of the moon (you’ll have to wait until the end of this article to find out what FLAGORGY actually does). However, reading about the AGC architecture in more detail was pretty fascinating, not to mention very humbling. I am in awe of programmers back then; programming computers nowadays seems almost trivial by comparison.

Anyway, I decided to write this article to provide a summary of what I found. It is not intended as a comprehensive summary of the AGC architecture, but it should provide a decent glimpse into what the AGC was like (and what FLAGORGY does). By necessity, I’m assuming you are familiar with basic computer architecture concepts (instruction sets, memory addressing, etc.) I’m also by no means an AGC expert (or an expert on 1960’s architectures), so I’m more than happy to be corrected on anything I say here.

AGC Architecture 101
First of all, let’s see what the AGC architecture looks like. It is actually your run-of-the-mill Von Neumann architecture: it has a processor with an instruction set, registers, memory, and input/output devices. The devil is in the details, and each of these components gets pretty complicated once you dig into them, so I’ll focus only on the aspects that relate to understanding FLAGORGY. If you want to read more on the AGC architecture, the Wikipedia article on the Apollo Guidance Computer provides a pretty decent summary.

In the AGC architecture, words were 16 bits long, although only 15 bits are actually usable (the 16th bit is a parity bit for error checking). A word in memory can be used to represent either data (integers and real numbers up to a certain precision) or instructions. We will only need to understand how instructions are represented, so I’ll focus on that (for a description of how data is represented in AGC memory, see this page).

A word containing an instruction uses the first three bits to store an operation code (or “opcode”), and the remaining 12 bits to store an address.

Ok, let that sink in for a bit: three bits for the opcode. This means the AGC only had eight opcodes. This didn’t, however, mean that you only had eight instructions: several of the opcodes would behave differently depending on whether the address was a special address (like the all-zeroes address), or whether it contained an actual address in memory. Additionally, the AGC included a mechanism to use the fourth bit as part of the op code as well (this required calling an EXTEND instruction first, so the computer would know the following instruction had a special four-bit opcode).

Amusing side note: Apparently, the three bits for the opcode originated in the first version of the AGC (“Block I”), which legitimately needed only a three-bit opcode. The next version of the AGC (“Block II”, the one that actually had to fly to the moon, and the one I’m describing in this article) was stuck with this design decision, and the AGC developers had to creatively work around it. This is a situation that I’m sure many software developers out there are painfully familiar with (“three bits for the opcode ought to be enough for anybody!”)

In any case, even with the expanded instruction set, this was a pretty limited instruction set compared to modern processors. The instructions themselves are actually not relevant to our quest for the meaning of FLAGORGY, although they include the usual suspects: instructions to add register values, instructions to store/load values from/to memory, instructions to branch depending on a value, etc. If you’re curious, you can see the entire instruction set here.

Another interesting aspect of the instruction words is that the 12 bits for the address field were not enough to address the entire memory space, so the architecture uses bank switching to access the full range of addresses. But, again, we don’t need to know all the gory details (which you can find in pages 1–7 to 1–14 of this manual).

But how much memory did the AGC have? It actually had only 36,864 words of read-only memory (“fixed” memory in AGC lingo), and 2,048 words of read-write memory (or “erasable” memory). The actual amount of memory available to programmers was actually a bit less, since there were special addresses and ranges that could not be used by programmers.

Once again, take a moment to let this sink in: all the software required to fly a massively complex spacecraft to the moon and back had to fit in 36K words of memory. Not just that, the AGC didn’t support dynamically loading programs from secondary storage; instead the software for the AGC was literally hardwired into rope memory and, once this was done, it could not be modified.

On top of that, you only had 2K words to store “variables” in, with some of the “erasable” memory used by the astronauts and mission control to specify new pieces of code to run.

So, that’s the AGC architecture in a nutshell (and, again, I’m leaving out tons of details; see some of the links peppered throughout this section if you want to learn more).

Now, you might think that, since this was a custom-built architecture, it would’ve met all requirements of the lunar missions. However, you have to remember that, during the space race, everyone (from the rocket scientists to the software developers) was in uncharted territory and having to improvise a lot along the way, with some design decisions turning out to be less than ideal in hindsight (like the three-bit opcode). And, as it turns out, the AGC architecture still had another major issue…

