#include <stdio.h>
#include <string.h>
#include<math.h>
#include<stdlib.h>
#include<time.h>
#include<limits.h>

float prob_func(int train_set[][192],int label[],int class,int feature,int value,float prob_class[] ){
    int i,j;
    float count1=0.0,count2=0.0;
    for(i=0;i<6670;i++){
        if(label[i]==class){
            if(train_set[i][feature]==value){
                count1++;
            }
            count2++;
        
        }
    }
    prob_class[class]=count2/6670.0;
    return count1/count2;
}

int pred_func(int test[],float probability_matrix[][192][5],float prob_class[]){
    float max= -99999.0;
    float sum;
    int i,j,index=-1;
    for(i=0;i<10;i++){
        sum=0.0;
        for(j=0;j<192;j++){
            sum=sum+log(probability_matrix[i][j][test[j]]);
        }
        sum=sum+log(prob_class[i]);
        if(sum>max){
            max = sum;
            index= i;
        }
    }
    return index;

}

int main(){
    FILE *f1 =fopen("pp_tra.dat","r");
    int train_set[6670][192];
    int label[6670];
    float prob_class[10];//matrix for storing priori prob
    int i,j,k,c;
    for(i=0;i<6670;i++){
        for(j=0;j<192;j++){
            fscanf(f1,"%d",&train_set[i][j]);
        }
        fscanf(f1,"%d",&label[i]);
    }
    float probability_matrix[10][192][5];


    for(i=0;i<10;i++){
        for(j=0;j<192;j++){
            for(k=0;k<5;k++){
                probability_matrix[i][j][k]=prob_func(train_set,label,i,j,k,prob_class);
            }
        }
    }
    for(i=0;i<10;i++){
        printf("%d\n\n ",i);
        for(j=0;j<192;j++){
            printf("%d ",j);
            for(k=0;k<5;k++){
                printf("%f ",probability_matrix[i][j][k]);
            }
            printf("\n");

        }
        printf("\n");
    }
    FILE *f2 =fopen("pp_tes.dat","r");
    int test[3333][192];
    int label_predicted[3333];
    int label_test[3333];
    for(i=0;i<3333;i++){
        for(j=0;j<192;j++){
            fscanf(f2,"%d",&test[i][j]);
        }
        fscanf(f2,"%d",&label_test[i]);
    }
    for(i=0;i<3333;i++){
        label_predicted[i]= pred_func(test[i],probability_matrix,prob_class);
    }
    int count=0;
    for(i=0;i<3333;i++){
        if(label_test[i]==label_predicted[i]){
            count++;
        }
    }

    for(i=0;i<3333;i++){
        printf("%d %d %d\n",i,label_predicted[i],label_test[i]);
    }

    printf("%lf\n",(count/3333.0)*100);

    return 0;
}

# Naive Bayes On The Iris Dataset
from csv import reader
from random import seed
from random import randrange
from math import sqrt
from math import exp
from math import pi

# Load a CSV file
def load_csv(filename):
	dataset = list()
	with open(filename, 'r') as file:
		csv_reader = reader(file)
		for row in csv_reader:
			if not row:
				continue
			dataset.append(row)
	return dataset

# Convert string column to float
def str_column_to_float(dataset, column):
	for row in dataset:
		row[column] = float(row[column].strip())

# Convert string column to integer
def str_column_to_int(dataset, column):
	class_values = [row[column] for row in dataset]
	unique = set(class_values)
	lookup = dict()
	for i, value in enumerate(unique):
		lookup[value] = i
	for row in dataset:
		row[column] = lookup[row[column]]
	return lookup

# Split a dataset into k folds
def cross_validation_split(dataset, n_folds):
	dataset_split = list()
	dataset_copy = list(dataset)
	fold_size = int(len(dataset) / n_folds)
	for _ in range(n_folds):
		fold = list()
		while len(fold) < fold_size:
			index = randrange(len(dataset_copy))
			fold.append(dataset_copy.pop(index))
		dataset_split.append(fold)
	return dataset_split

# Calculate accuracy percentage
def accuracy_metric(actual, predicted):
	correct = 0
	for i in range(len(actual)):
		if actual[i] == predicted[i]:
			correct += 1
	return correct / float(len(actual)) * 100.0

# Evaluate an algorithm using a cross validation split
def evaluate_algorithm(dataset, algorithm, n_folds, *args):
	folds = cross_validation_split(dataset, n_folds)
	scores = list()
	for fold in folds:
		train_set = list(folds)
		train_set.remove(fold)
		train_set = sum(train_set, [])
		test_set = list()
		for row in fold:
			row_copy = list(row)
			test_set.append(row_copy)
			row_copy[-1] = None
		predicted = algorithm(train_set, test_set, *args)
		actual = [row[-1] for row in fold]
		accuracy = accuracy_metric(actual, predicted)
		scores.append(accuracy)
	return scores

# Split the dataset by class values, returns a dictionary
def separate_by_class(dataset):
	separated = dict()
	for i in range(len(dataset)):
		vector = dataset[i]
		class_value = vector[-1]
		if (class_value not in separated):
			separated[class_value] = list()
		separated[class_value].append(vector)
	return separated

# Calculate the mean of a list of numbers
def mean(numbers):
	return sum(numbers)/float(len(numbers))

# Calculate the standard deviation of a list of numbers
def stdev(numbers):
	avg = mean(numbers)
	variance = sum([(x-avg)**2 for x in numbers]) / float(len(numbers)-1)
	return sqrt(variance)

# Calculate the mean, stdev and count for each column in a dataset
def summarize_dataset(dataset):
	summaries = [(mean(column), stdev(column), len(column)) for column in zip(*dataset)]
	del(summaries[-1])
	return summaries

# Split dataset by class then calculate statistics for each row
def summarize_by_class(dataset):
	separated = separate_by_class(dataset)
	summaries = dict()
	for class_value, rows in separated.items():
		summaries[class_value] = summarize_dataset(rows)
	return summaries

# Calculate the Gaussian probability distribution function for x
def calculate_probability(x, mean, stdev):
	exponent = exp(-((x-mean)**2 / (2 * stdev**2 )))
	return (1 / (sqrt(2 * pi) * stdev)) * exponent

# Calculate the probabilities of predicting each class for a given row
def calculate_class_probabilities(summaries, row):
	total_rows = sum([summaries[label][0][2] for label in summaries])
	probabilities = dict()
	for class_value, class_summaries in summaries.items():
		probabilities[class_value] = summaries[class_value][0][2]/float(total_rows)
		for i in range(len(class_summaries)):
			mean, stdev, _ = class_summaries[i]
			probabilities[class_value] *= calculate_probability(row[i], mean, stdev)
	return probabilities

# Predict the class for a given row
def predict(summaries, row):
	probabilities = calculate_class_probabilities(summaries, row)
	best_label, best_prob = None, -1
	for class_value, probability in probabilities.items():
		if best_label is None or probability > best_prob:
			best_prob = probability
			best_label = class_value
	return best_label

# Naive Bayes Algorithm
def naive_bayes(train, test):
	summarize = summarize_by_class(train)
	predictions = list()
	for row in test:
		output = predict(summarize, row)
		predictions.append(output)
	return(predictions)

# Test Naive Bayes on Iris Dataset
seed(1)
filename = 'iris.csv'
dataset = load_csv(filename)
for i in range(len(dataset[0])-1):
	str_column_to_float(dataset, i)
# convert class column to integers
str_column_to_int(dataset, len(dataset[0])-1)
# evaluate algorithm
n_folds = 5
scores = evaluate_algorithm(dataset, naive_bayes, n_folds)
print('Scores: %s' % scores)
print('Mean Accuracy: %.3f%%' % (sum(scores)/float(len(scores))))