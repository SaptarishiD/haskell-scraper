["type erasure and reification - eli bendersky's website","toggle navigation eli bendersky's website about projects archives","type erasure and reification","december 05, 2018 at 05:10","tags programming , c & c++ , python","in this post i'd like to discuss the concepts of type erasure and reification in programming languages. i don't intend to dive very deeply into the specific rules of any particular language; rather, the post is going to present several simple examples in multiple languages, hoping to provide enough intuition and background for a more serious study, if necessary. as you'll see, the actual concepts are very simple and familiar. deeper details of specific languages pertain more to the idiosyncrasies of those languages' semantics and implementations.","important note: in c++ there is a programming pattern called type erasure , which is quite distinct from what i'm trying to describe here [1] . i'll be using c++ examples here, but that's to demonstrate how the original concepts apply in c++. the programming pattern will be covered in a separate post.","types at compile time, no types at run-time","the title of this section is a \"one short sentence\" explanation of what type erasure means. with few exceptions, it only applies to languages with some degree of compile time (a.k.a. static ) type checking. the basic principle should be immediately familiar to folks who have some idea of what machine code generated from low-level languages like c looks like. while c has static typing, this only matters in the compiler - the generated code is completely oblivious to types.","for example, consider the following c snippet:","typedef struct frob_t {","int x ;","int y ;","int arr [ 10 ];","} frob ; int extract ( frob * frob ) {","return frob -> y * frob -> arr [ 7 ];","}","when compiling the function extract , the compiler will perform type checking. it won't let us access fields that were not declared in the struct, for example. neither will it let us pass a pointer to a different struct (or to a float ) into extract . but once it's done helping us, the compiler generates code which is completely type-free:","0: 8b 47 04 mov 0x4(%rdi),%eax 3: 0f af 47 24 imul 0x24(%rdi),%eax 7: c3 retq","the compiler is familiar with the stack frame layout and other specifics of the abi, and generates code that assumes a correct type of structure was passed in. if the actual type is not what this function expects, there will be trouble (either accessing unmapped memory, or accessing wrong data).","a slightly adjusted example will clarify this:","int extract_cast ( void * p ) {","frob * frob = p ;","return frob -> y * frob -> arr [ 7 ];","}","the compiler will generate exactly identical code from this function, which in itself a good indication of when the types matter and when they don't. what's more interesting is that extract_cast makes it extremely easy for programmers to shoot themselves in the foot:","someotherstruct ss ;","extract_cast ( & ss ); // oops","in general, type erasure is a concept that descibes these semantics of a language. types matter to the compiler, which uses them to generate code and help the programmer avoid errors. once everything is type-checked, however, the types are simply erased and the code the compiler generates is oblivious to them. the next section will put this in context by comparing to the opposite approach.","reification - retaining types at run-time","while erasure means the compiler discards all type information for the actual generated code, reification is the other way to go - types are retained at run-time and used for perform various checks. a classical example from java will help demonstrate this:","class main {","public static void main ( string [] args ) {","string strings [] = { \"a\" , \"b\" };","object objects [] = strings ;","objects [ 0 ] = 5 ;","}","}","this code creates an array of string , and converts it to a generic array of object . this is valid because arrays in java are covariant , so the compiler doesn't complain. however, in the next line we try to assign an integer into the array. this happens to fail with an exception at run-time :","exception in thread \"main\" java.lang.arraystoreexception: java.lang.integer at main.main(main.java:5)","a type check was inserted into the generated code, and it fired when an incorrect assignment was attempted. in other words, the type of objects is reified . reification is defined roughly as \"taking something abstract and making it real/concrete\", which when applied to types means \"compile-time types are converted to actual run-time entities\".","c++ has some type reification support as well, e.g. with dynamic_cast :","struct base {","virtual void basefunc () {","printf ( \"basefunc \\n \" );","}","}; struct derived : public base {","void derivedfunc () {","printf ( \"derived \\n \" );","}","}; void call_derived ( base * b ) {","derived * d = dynamic_cast < derived *> ( b );","if ( d != nullptr ) {","d -> derivedfunc ();","} else {","printf ( \"cast failed \\n \" );","}","}","we can call call_derived thus:","int main () {","derived d ;","call_derived ( & d ); base b ;","call_derived ( & b );","}","the first call will successfully invoke derivedfunc ; the second will not, because the dynamic_cast will return nullptr at run-time. this is because we're using c++'s run-time type information (rtti) capabilities here, where an actual representation of the type is stored in the generated code (most likely attached to the vtable which every polymorphic object points to). c++ also has the typeid feature, but i'm showing dynamic_cast since it's the one most commonly used.","note particularly the differences between this sample and the c sample in the beginning of the post. conceptually, it's similar - we use a pointer to a general type (in c that's void* , in the c++ example we use a base type) to interact with concrete types. whereas in c there is no built-in run-time type feature, in c++ we can use rtti in some cases. with rtti enabled, dynamic_cast can be used to interact with the run-time (reified) representation of types in a limited but useful way.","type erasure and java generics","one place where folks not necessarily familiar with programming language type theory encounter erasure is java generics, which were bolted onto the language after a large amount of code has already been written. the designers of java faced the binary compatibility challenge, wherein they wanted code compiled with newer java compilers to run on older vms.","the solution was to use type erasure to implement generics entirely in the compiler. here's a quote from the official java generics tutorial :","generics were introduced to the java language to provide tighter type checks at compile time and to support generic programming. to implement generics, the java compiler applies type erasure to:","replace all type parameters in generic types with their bounds or object if the type parameters are unbounded. the produced bytecode, therefore, contains only ordinary classes, interfaces, and methods.","insert type casts if necessary to preserve type safety.","generate bridge methods to preserve polymorphism in extended generic types.","here's a very simple example to demonstrate what's going on, taken from a stack overflow answer . this code:","import java.util.list ;","import java.util.arraylist ; class main {","public static void main ( string [] args ) {","list < string > list = new arraylist < string > ();","list . add ( \"hi\" );","string x = list . get ( 0 );","system . out . println ( x );","}","}","uses a generic list . however, what the compiler creates prior to emitting bytecode is equivalent to:","import java.util.list ;","import java.util.arraylist ; class main {","public static void main ( string [] args ) {","list list = new arraylist ();","list . add ( \"hi\" );","string x = ( string ) list . get ( 0 );","system . out . println ( x );","}","}","here list is a container of object , so we can assign any element to it (similarly to the reification example shown in the previous section). the compiler then inserts a cast when accessing that element as a string. in this case the compiler will adamantly preserve type safety and won't let us do list.add(5) in the original snippet, because it sees that list is a list<string> . therefore, the cast to (string) should be safe.","using type erasure to implement generics with backwards compatibility is a neat idea, but it has its issues. some folks complain that not having the types available at runtime is a limitation (e.g. not being able to use instanceof and other reflection capabilities). other languages, like c# and dart 2, have reified generics which do preserve the type information at run-time.","reification in dynamically typed languages","i hope it's obvious that the theory and techniques described above only apply to statically-typed languages. in dynamically-typed languages, like python, there is almost no concept of types at compile-time, and types are a fully reified concept. even trivial errors like:","class foo : def bar ( self ): pass f = foo ()","f . joe () # <--- calling non-existent method","fire at run-time, because there's no static type checking [2] . types obviously exist at run-time, with functions like type() and isinstance() providing complete reflection capabilities. the type() function can even create new types entirely at run-time .","[1] but it's most likely what you'll get to if you google for \"c++ type erasure\".","[2] to be clear - this is not a bug; it's a feature of python. a new method can be added to classes dynamically at runtime (here, some code could have defined a joe method for foo before the f.joe() invocation), and the compiler has absolutely no way of knowing this could or couldn't happen. so it has to assume such invocations are valid and rely on run-time checking to avoid serious errors like memory corruption.","for comments, please send me an email .","\169 2003-2024 eli bendersky back to top"]
